name: Environment Variables

on: [ push, pull_request ]

# Environment variable (Global sort of for ALL JOBS) (applicable to whole workflow)
# Defining en variables always use underscore and not hypen.
env:
  Workflow_ENV: Available to all JOBS

jobs:
  Print-Define-ENV-Variables: #JOB1
    runs-on: ubuntu-latest
    # Applying EVN for particular JOB (local sort of at JOB level) ( applicable to only particular JOB)
    env:
      Local_ENV: Available to JOB1 only and for all steps of JOB1
    steps:
      - name: ECHO ENV Variables for STEP-1
      # Applying ENV for particular step (local sort of at STEP level ) (applicable to only particular step of a JOB)
        env:
          step_ENV_variable: Available to only this step
        run: |
          echo "Global Variable: ${Workflow_ENV} "
          echo " Local Variable at JOB level: ${Local_ENV} "
          echo " Local Variable at step lebel: ${step_ENV_variable} "
      - name: ECHO ENV Variables of STEP-1
        run: |
          echo "Global Variable: ${Workflow_ENV} (True)"
          echo " Local Variable at JOB level: ${Local_ENV} (True)"
          echo " Local Variable at step lebel: ${step_ENV_variable} (False)"
  
  Print-Default-ENV-Variables:
  # https://docs.github.com/en/actions/learn-github-actions/environment-variables
  # ${{ github.entity }}
    runs-on: ubuntu-latest
    steps:
      - name: Default ENV variables provided by GitHub Actions
        run: |
          echo "HOME Directory: ${HOME}"
          echo "GITHUB_WORKFLOW: ${GITHUB_WORKFLOW} OR ${{ github.workflow }} "
          echo "GITHUB_ACTION: ${GITHUB_ACTION}"
          echo "GITHUB_ACTIONS: ${GITHUB_ACTIONS}"
          echo "GITHUB_ACTOR: ${GITHUB_ACTOR}"
          echo "GITHUB_REPOSITORY: ${GITHUB_REPOSITORY} OR ${{ github.repository }}"
          echo "GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME}"
          echo "GITHUB_WORKSPACE: ${GITHUB_WORKSPACE} OR ${{ github.workspace }}"
          echo "GITHUB_SHA: ${GITHUB_SHA} OR ${{ github.sha }}"
          echo "GITHUB_REF: ${GITHUB_REF}"
          echo "Global Variable: ${Workflow_ENV} (True)"
          echo " Local Variable at JOB level: ${Local_ENV} (False)"
          echo " Local Variable at step lebel: ${step_ENV_variable} (False)"
  
  Print-Secrets-Variables:
    # Define Secrets value by going into Repo SETTINGS->SECRETS
    # A Secrets has a value limitation of 64KB.
    # Secrets help to ecrypt the variables like password ,token ,API key etc.
    # Suppose there is an actions which requires authentication , so here we can use GITHUB_TOKEN.
    # https://docs.github.com/en/actions/security-guides/automatic-token-authentication
    runs-on: ubuntu-latest
    steps:
      - name: Echo Secrets variables
        env:
          secrets_env: ${{ secrets.SECRET_VARIABLE }}
          Personal_Access_Token: ${{ secrets.GITHUB_TOKEN }} # A default variable by GITHUB ACTIONS.
        run: |
          echo "Secret value which will be shown as *** ${secrets_env}"
          echo "Secret value which will be shown as *** ${Personal_Access_Token}"

  Print-Secrets-Variables-Greater-Than-64KB:
    # Secrets which are more than 64KB are stored in GitHub Repository branches using an encrypting method and then decrypting it later.
    # So to encrpty a file using an tool gpg4win.
    # https://docs.github.com/en/actions/security-guides/encrypted-secrets.
    # Using an gpg command encrypt the file by applying a PASSPHRASE password. Commit the encrypted file and push it.
    # Make a secret in the setting having PASSPHRASE password and use that secret in the workflow.
    # So now to use the file secret value we need to checkout the repository on runner and decrypt it over there.
    runs-on: ubuntu-latest
    steps:
      - name: Taking whole repository clone on runner
        uses: actions/checkout@v1
      - name: Decrypt Secret JSON file
        env:
          PASSPHRASE: ${{ secrets.PASSPHRASE }}
        run: |
          gpg --quiet --batch --yes --decrypt --passphrase="$PASSPHRASE" --output $HOME/secret.json
          # --batch to prevent interactive command
          # --yes to assume "yes" for questions
      - name: Verify the values of JSON file after decrypting
        run: 
          cat secret.json 




