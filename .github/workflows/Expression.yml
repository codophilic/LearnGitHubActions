name: Expression and contexts

on: [ push, pull_request ]

jobs:
  LearnAboutExpression:
  # ${{ any_Type_of_values }} can an expression have.
  # https://docs.github.com/en/actions/learn-github-actions/expressions
    runs-on: ubuntu-latest
    steps:
      - name: Expression can have boolean, number, string values or functions
        run: |
          echo ${{ 1 }}
          echo ${{ 'Hello Actions' }}
          echo ${{ 1>2 }}
          echo ${{ 'ABC' == 'DEF' }}

  LearnAboutFunctions:
    # Some built-in functions https://docs.github.com/en/actions/learn-github-actions/expressions#functions
    runs-on: ubuntu-latest
    steps:
      - name: Functions
        # Below functions will return boolean values.
        run: |
          echo ${{ contains( 'hello', 'll' ) }}
          echo ${{ startsWith( 'hello', 'he' ) }}
          echo ${{ endsWith( 'hello', 'lo' ) }}
          echo ${{ format( 'Hello {0} {1} {2}' , 'World','Welcome to','GitHub Actions' ) }}
  
  JobStatusFunction:
    # Provide Information about JOBS.
    # You can use the following status check functions as expressions in if conditionals. 
    # A default status check of success() is applied unless you include one of these functions.
    # https://docs.github.com/en/actions/learn-github-actions/expressions#status-check-functions
    # failure() returns true if any of previous step fails.
    # always() returns true always runs.
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
    - name: Run step-1
      run: eccho 'Error command'
    - name: Run step-2 even if step-1 is failure
      if: failure()
      run: echo 'Step-1 failed, step-2 executed'
    - name: Run step-3 which won't run because step-1 failed
      run: echo 'Not run'
    - name: Run step-4 always even if any step fails or succeed.
      if: always()
      run: echo 'Always RUNS'  

  Run-All-JOBS-evenIF-oneFails-Using-ContinueOnError:
    runs-on: ubuntu-latest
    # Here suppose we want to run all jobs even if one fails we can use a key 'continue-on-error' 
    # or 'timeout-minutes' after that failure JOB.
    steps:
      - name: Run all the JOBS even if one fails.
        run: eccho 'Failure Step'
        continue-on-error: true
      - name: step-2 runs even of step-1 fails
        run: echo 'STEP-2 running even after STEP-1 failing'
      - name: step-3 runs even of step-1 fails
        run: echo 'STEP-3 running even after STEP-1 failing'

  Run-All-JOBS-evenIF-oneFails-Using-TimeoutMinutes:
    runs-on: ubuntu-latest
    # Here suppose we want to run all jobs even if one fails we can use a key 'continue-on-error' 
    # or 'timeout-minutes' after that failure JOB.
    # timeout-minutes: 360
    # Here 360 means 6 hours, this is the default maximum limit if a jobs takes to run, suppose any job
    # takes more than 6 hours , actions will automatically cancel that workflows.
    # We can increase or decrease the time as per our requirement.
    steps:
      - name: Run all the JOBS even if one fails.
        run: eccho 'Failure Step'
        timeout-minutes: 0 
      - name: step-2 runs even of step-1 fails
        run: echo 'STEP-2 running even after STEP-1 failing'
      - name: step-3 runs even of step-1 fails
        run: echo 'STEP-3 running even after STEP-1 failing'

  LearnAboutContexts:
        # In expression ${{ secrets.GITHUB_TOKEN }} secrets are contexts which are called objects.
        # Contexts are a way to access information about workflow runs, runner environments, jobs, and steps. 
        # Each context is an object that contains properties, which can be strings or other objects.
        # https://docs.github.com/en/actions/learn-github-actions/contexts
        # toJSON is a function used which converts context into JSON format. Here context are github,job,steps,runner etc.
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        id: github_context_step
        run: echo '${{ toJSON(github) }}'
      - name: Dump job context
        run: echo '${{ toJSON(job) }}'
      - name: Dump steps context
        run: echo '${{ toJSON(steps) }}'
      - name: Dump runner context
        run: echo '${{ toJSON(runner) }}'
      - name: Dump strategy context
        run: echo '${{ toJSON(strategy) }}'
      - name: Dump matrix context
        run: echo '${{ toJSON(matrix) }}'