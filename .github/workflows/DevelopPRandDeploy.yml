name: Before deploying react application pull request status check test cases

on: 
  pull_request:
    branches:
      - develop
      - main 
  push:
    branches:
      - develop
      - main 
env:
  path: ./ReactApplication/my-react-application/

jobs:
  TESTCASES:
    #environment: Approver
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repositories
        uses: actions/checkout@v2
      - name: Using canche from actions
        uses: actions/cache@v1
        with:
          path: ~/.npm # Differs due to package manager
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} # a variable or static key
          restore-keys: |
            ${{ runner.os }}-node-
          # If github does not find ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} , it will search in restore key.
      - name: set-up a specific node version on runner
        uses: actions/setup-node@v1
        with:
          node-version: "16.x"
      - name: Installing Dependencies
        run: |
          cd ${{ env.path }}
          npm ci 
      - name: Check Prettier Formats
        run: |
          cd ${{ env.path }}
          npm run format:check
      - name: Run Automated test for Code coverage
        run: |
          pwd
          ls
          cd ${{ env.path }}
          npm test -- --coverage
        env:
          CI: true
      - name: Upload Test Coverage reports as an artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Reports of Code coverage #name of our artifiacts
          path: ${{ env.path }}coverage # path provided to github to take it and upload it .
        # At the bottom of the workflow summary page, there is a dedicated section for artifacts where the artifacts are stored.



      - name: Build after passing TestCases checks only.
        if: github.event_name == 'push' #run the JOB if its a push event not pull request.
        run: |
          cd ${{ env.path }}
          npm run build
      - name: Upload Build
        uses: actions/checkout@v3
        if: github.event_name == 'push' #run the JOB if its a push event not pull request.
        with:
          name: Build
          path: ${{ env.path }}build



      - name: Installing surge on runners
        if: github.event_name == 'push' #run the JOB if its a push event not pull request.
        run: |
          cd ${{ env.path }}
          npm install -g surge
      - name: After success full build deploy it.
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop' #run the JOB if its a push event not pull request.
        run: |
          cd ${{ env.path }}
          ls 
          npx surge --project build --domain pointless-finger.surge.sh
        # Basically surge is an interactive CLI which ask for build folder and displays the domain name.
        # So we here provided surge a custom domain name or the last domain name in which it was deployed.
        # Every time we run surge command locally it creates an random domain.
        env:
          SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}
      
      - name: Production deployment
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          cd ${{ env.path }}
          npx surge --project build --domain production-reactdeployed.surge.sh
        env:
          SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}
      - name: Creating Zip
        run: |
          cd ${{ env.path }}
          zip -r build.zip build
          zip -r coverage.zip coverage
      - name: Create Auto Releases
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          cd ${{ env.path }}
          npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      



